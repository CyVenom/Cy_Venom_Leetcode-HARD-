from collections import defaultdict, deque

class Solution:
    def largestPathValue(self, colors: str, edges: List[List[int]]) -> int:
        n = len(colors)
        graph = defaultdict(list)
        indegree = [0] * n
        
        # Build graph and indegree array
        for u, v in edges:
            graph[u].append(v)
            indegree[v] += 1
        
        # Topological sort with queue
        queue = deque()
        for i in range(n):
            if indegree[i] == 0:
                queue.append(i)
        
        # color_count[node][c] = max count of color c (0-25) reaching this node
        color_count = [[0]*26 for _ in range(n)]
        for i in range(n):
            color_count[i][ord(colors[i]) - ord('a')] = 1
        
        visited = 0
        max_color_val = 0
        
        while queue:
            u = queue.popleft()
            visited += 1
            for v in graph[u]:
                for c in range(26):
                    count = color_count[u][c] + (1 if c == ord(colors[v]) - ord('a') else 0)
                    color_count[v][c] = max(color_count[v][c], count)
                indegree[v] -= 1
                if indegree[v] == 0:
                    queue.append(v)
            max_color_val = max(max_color_val, max(color_count[u]))
        
        return max_color_val if visited == n else -1
