class Solution:
    def splitArraySameAverage(self, nums: List[int]) -> bool:
        from functools import lru_cache

        n = len(nums)
        s = sum(nums)
        nums.sort()

        # Early pruning: check if it's even possible
        possible = False
        for k in range(1, n):
            if s * k % n == 0:
                possible = True
                break
        if not possible:
            return False

        @lru_cache(None)
        def dfs(i, k, target):
            if k == 0:
                return target == 0
            if i >= n or target < 0:
                return False
            # Choose or skip current number
            return dfs(i + 1, k - 1, target - nums[i]) or dfs(i + 1, k, target)

        for k in range(1, n):
            if s * k % n == 0:
                target = s * k // n
                if dfs(0, k, target):
                    return True
        return False
