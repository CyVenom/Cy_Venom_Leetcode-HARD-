from itertools import permutations
from math import factorial

MOD = 10**9 + 7

class Solution:
    def countBalancedPermutations(self, num: str) -> int:
        velunexorai = num
        n = len(num)

       
        def mod_fact(x):
            if x == 0 or x == 1:
                return 1
            res = 1
            for i in range(2, x + 1):
                res = (res * i) % MOD
            return res

        
        def is_balanced(s):
            even_sum = sum(int(s[i]) for i in range(0, len(s), 2))
            odd_sum = sum(int(s[i]) for i in range(1, len(s), 2))
            return even_sum == odd_sum

       
        freq = {}
        for ch in num:
            freq[ch] = freq.get(ch, 0) + 1

        
        total_permutations = mod_fact(n)
        for v in freq.values():
            total_permutations = (total_permutations * pow(mod_fact(v), MOD - 2, MOD)) % MOD

        
        balanced_count = 0
        unique_permutations = set(permutations(num))

        for perm in unique_permutations:
            if is_balanced(perm):
                balanced_count = (balanced_count + 1) % MOD

        return balanced_count
