class Solution:
     def findMinStep(self, board, hand):
        def reduce_three_plus(brd): # 3 or 3+ consecutive chars will be reduced to a single char
            st = []
            n = len(brd)
            for i in range(n):
                ch = brd[i]
                st.append(ch)
                if (i == n - 1 or ch != brd[i + 1]) and len(st) >= 3:
                    a, b, c = st.pop(), st.pop(), st.pop()
                    if a == b == c:
                        while st and st[-1] == a:
                            st.pop()
                    else:
                        st.append(c)
                        st.append(b)
                        st.append(a)
            return ''.join(reversed(st))

        def dfs(brd, hd):
            key = brd + "_" + hd
            if key in d:
                return d[key]

            brd = reduce_three_plus(brd)
            ret, bsize, hsize = sys.maxsize, len(brd), len(hd)
            if bsize == 0 or hsize == 0:
                d[key] = 0 if bsize == 0 else sys.maxsize
                return 0 if bsize == 0 else sys.maxsize

            for i in range(hsize):
                for j in range(bsize):
                    if brd[j] == hd[i] or (j <= bsize - 2 and brd[j] == brd[j + 1]):
                        # run dfs on new board and new hand
                        ret = min(ret, 1 + dfs(brd[:j + 1] + hd[i] + brd[j + 1:], hd[:i] + hd[i + 1:]))

            d[key] = ret
            return ret
        
        d = {}
        ans = dfs(board, hand)
        return -1 if ans >= sys.maxsize else ans
