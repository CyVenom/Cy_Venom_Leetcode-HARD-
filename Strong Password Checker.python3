class Solution:
    def strongPasswordChecker(self, password: str) -> int:
        lowercase = set(string.ascii_lowercase)
        uppercase = set(string.ascii_uppercase)
        digit = set(string.digits)

        charectors = set(password)

        missing_type = 3 - (bool(charectors & lowercase) + bool(charectors & uppercase) + bool(charectors & digit))
        num_required_type_replaces = missing_type

        num_required_inserts = max(0, 6 - len(password))
        num_required_delete = max(0, len(password) - 20)

        groups = [len(list(grp)) for _, grp in itertools.groupby(password)]

        def apply_best_delete():

            argmin, _ = min(
                enumerate(groups),
                key=lambda it: it[1] % 3 if it[1] >= 3 else float('inf'),
                default=(None, None),
            )
            if argmin is not None and groups[argmin] >= 3:
                groups[argmin] -= 1

        for _ in range(num_required_delete):
            apply_best_delete()

        num_required_group_replaces = sum(group // 3 for group in groups)

        return (
            num_required_delete +
            max(num_required_type_replaces, num_required_group_replaces, num_required_inserts)
        )
