MOD = 10**9 + 7

class Solution:
    def countPalindromicSubsequences(self, s: str) -> int:
        n = len(s)
        dp = [[0] * n for _ in range(n)]

        for i in range(n):
            dp[i][i] = 1

        for length in range(2, n + 1):
            for i in range(n - length + 1):
                j = i + length - 1
                if s[i] == s[j]:
                    left, right = i + 1, j - 1

                    while left <= right and s[left] != s[i]:
                        left += 1
                    while left <= right and s[right] != s[i]:
                        right -= 1

                    if left > right:
                        dp[i][j] = (2 * dp[i + 1][j - 1] + 2) % MOD
                    elif left == right:
                        dp[i][j] = (2 * dp[i + 1][j - 1] + 1) % MOD
                    else:
                        dp[i][j] = (2 * dp[i + 1][j - 1] - dp[left + 1][right - 1]) % MOD
                else:
                    dp[i][j] = (dp[i + 1][j] + dp[i][j - 1] - dp[i + 1][j - 1]) % MOD

                if dp[i][j] < 0:
                    dp[i][j] += MOD

        return dp[0][n - 1]


solution = Solution()
print(solution.countPalindromicSubsequences("bccb"))  # Output: 6
print(solution.countPalindromicSubsequences("abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba")) 
